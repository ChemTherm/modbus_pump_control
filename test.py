# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

'''
pyuic5 â€“x "filename".ui â€“o "filename".py
ðŸ”² Termination of modbus needs to be handled
ðŸ”² KeyboardInterrupt on startup/in general



'''


from PyQt5 import QtCore, QtGui, QtWidgets
from main import ModbusController
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import random


class PlotCanvas(FigureCanvas):
    def __init__(self, parent, modbus):
        self.fig = Figure()
        self.ax = self.fig.add_subplot(111)
        super().__init__(self.fig)
        self.modbus = modbus
        self.setParent(parent)
        self.plot()

    def plot(self):
        data = self.modbus.pop_flowrate_data()
        print(data)
        if not data:
            return
        self.ax.clear()  # Clear the previous plot
        self.ax.plot(data, 'r-')
        self.ax.set_title('Random Plot')
        self.draw()


class WorkerThread(QtCore.QThread):
    progress_updated = QtCore.pyqtSignal(int)

    def __init__(self, modbus, parent=None):
        super().__init__(parent)
        self.modbus = modbus

    def run(self):
        while True:
            self.progress_updated.emit(self.modbus.get_progress_percentage())
            # self.progress_updated.emit(50)
            # self.progress_updated.emit(50)
            self.msleep(500)


class Ui_MainWindow(object):
    def __init__(self):
        super().__init__()
        # self.thread = QtCore.QThread()
        self.modbus = ModbusController(run_preset=False)
        # print(self.modbus.get_progress_percentage())
        self.thread = WorkerThread(self.modbus)
        self.thread.progress_updated.connect(self.update_timers_ui)
        self.thread.start()
        self.running = False

        self.timer = QtCore.QTimer()  # Initialize the QTimer
        self.timer.timeout.connect(self.update_plot)  # Connect the QTimer to the update_plot method
        self.timer.start(500)  # Set the interval to 500 ms

    def toggle_start_stop(self):
        _translate = QtCore.QCoreApplication.translate
        if self.running:
            self.modbus.stop()
            self.startStopButton.setText(_translate("MainWindow", "Start"))
            # could possibly self.timer.stop()  # Restart the timer when starting
        else:
            self.modbus.start()
            self.startStopButton.setText(_translate("MainWindow", "Stop"))
            # could possibly self.timer.start(500)  # Restart the timer when starting
        self.running = not self.running

    def update_timers_ui(self, value):
        self.progressBar.setValue(value)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1294, 800)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.startStopButton = QtWidgets.QPushButton(self.centralwidget)
        self.startStopButton.setGeometry(QtCore.QRect(920, 620, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.startStopButton.setFont(font)
        self.startStopButton.setObjectName("startStopButton")
        self.startStopButton.clicked.connect(self.toggle_start_stop)
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(20, 20, 1251, 451))
        self.groupBox.setObjectName("groupBox")

        '''
        self.GraphSlider = QtWidgets.QScrollBar(self.groupBox)
        self.GraphSlider.setGeometry(QtCore.QRect(20, 410, 1181, 20))
        self.GraphSlider.setOrientation(QtCore.Qt.Horizontal)
        self.GraphSlider.setObjectName("GraphSlider")
        '''

        self.GraphCanvas = QtWidgets.QFrame(self.groupBox)
        self.GraphCanvas.setGeometry(QtCore.QRect(20, 30, 1181, 450))
        self.GraphCanvas.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.GraphCanvas.setFrameShadow(QtWidgets.QFrame.Raised)
        self.GraphCanvas.setObjectName("GraphCanvas")

        self.canvas_layout = QtWidgets.QVBoxLayout(self.GraphCanvas)
        self.plot_canvas = PlotCanvas(self.GraphCanvas, self.modbus)
        self.canvas_layout.addWidget(self.plot_canvas)

        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(920, 520, 118, 23))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.ProgressLabel = QtWidgets.QLabel(self.centralwidget)
        self.ProgressLabel.setGeometry(QtCore.QRect(910, 540, 111, 21))
        self.ProgressLabel.setObjectName("Progress")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1294, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.startStopButton.setText(_translate("MainWindow", "Start"))
        self.groupBox.setTitle(_translate("MainWindow", "ProgressGraph"))
        self.ProgressLabel.setText(_translate("MainWindow", "ProgressLabel"))

    def update_plot(self):
        self.plot_canvas.plot()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
