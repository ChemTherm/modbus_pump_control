# -*- coding: utf-8 -*-

# @author Martin Pek (martin.pek@web.de)
# Python 3.11


# Form implementation generated from reading ui file 'mainUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

"""
pyuic5 â€“x "filename".ui â€“o "filename".py
âœ… Termination of modbus needs to be handled
âœ… closing the UI via X button on UI does not stop the motor
ðŸ”² KeyboardInterrupt on startup/in general
ðŸ”² scaling UI?
ðŸ”² style! alternativen mit links
âœ… stageupdate updates the dropdown
ðŸ”² reset after program has finished via start
19537

"""


from PyQt5 import QtCore, QtGui, QtWidgets

from main import ModbusController
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas


class PlotCanvas(FigureCanvas):
    def __init__(self, parent, modbus):
        self.fig = Figure()
        self.ax = self.fig.add_subplot(111)
        super().__init__(self.fig)
        self.modbus = modbus
        self.setParent(parent)
        self.plot()

    def plot(self):
        data = self.modbus.pop_flowrate_data()
        if not data:
            return
        x_values, y_values = zip(*data)
        self.ax.plot(x_values, y_values, 'b')
        self.ax.set_title('Random Plot')
        self.draw()


class WorkerThread(QtCore.QThread):
    progress_updated = QtCore.pyqtSignal(int)
    position_updated = QtCore.pyqtSignal(int)
    stage_updated = QtCore.pyqtSignal(int)

    def __init__(self, modbus, parent=None):
        super().__init__(parent)
        self.modbus = modbus

    def run(self):
        while True:
            self.progress_updated.emit(self.modbus.get_progress_percentage())
            self.position_updated.emit(self.modbus.total_steps)
            self.stage_updated.emit(self.modbus.stage_updated)
            self.msleep(50)


class Ui_MainWindow(object):
    def __init__(self):
        super().__init__()
        self.modbus = ModbusController('192.168.59.35')
        self.thread = WorkerThread(self.modbus)
        self.thread.progress_updated.connect(self.update_timers_ui)
        self.thread.position_updated.connect(self.update_position)
        self.thread.stage_updated.connect(self.update_stage_ui)
        self.thread.start()
        self.running = False

        self.timer = QtCore.QTimer()                    # Initialize the QTimer
        self.timer.timeout.connect(self.update_plot)    # Connect the QTimer to the update_plot method
        self.timer.start(500)                           # Set the interval to 500 ms

    def toggle_start_stop(self):
        _translate = QtCore.QCoreApplication.translate
        if self.running:
            self.modbus.stop()
            self.startStopButton.setText(_translate("MainWindow", "Start"))
            # could possibly self.timer.stop()  # Restart the timer when starting
        else:
            self.modbus.start()
            self.startStopButton.setText(_translate("MainWindow", "Stop"))
            # could possibly self.timer.start(500)  # Restart the timer when starting
        self.running = not self.running

    def do_exit(self):
        self.modbus.stop()
        exit()

    def set_ip(self):
        if self.modbus.is_running():
            QtWidgets.QMessageBox.critical(None, "Error", "cannot change IP while motor is active", QtWidgets.QMessageBox.Ok)
            return
        ip = (f"{self.ipBlock_1.text()}.{self.ipBlock_2.text()}."
              f"{self.ipBlock_3.text()}.{self.ipBlock_4.text()}")
        #
        self.modbus = ModbusController(ip)

    def set_run_current(self):
        txt = self.runcurrentLine.text()
        if not txt:
            return
        print(f"setting run current to {txt}")
        self.modbus.set_run_current(int(txt))

    def correct_run_current(self):
        txt = self.runcurrentLine.text()
        if not txt:
            return
        value = int(txt)
        self.runcurrentLine.setText(str(max(min(100, value), 0)))

    def update_timers_ui(self, value):
        self.progressBar.setValue(value)

    def update_position(self, value):
        self.positionDisplay.setText(str(value))

    def populate_dropdown(self):
        presets = self.modbus.get_preset_list()
        for entry in presets:
            self.stageDropdown.addItem(f"{entry[1]} l/min")

    def stage_selected(self, index):
        self.modbus.override_stage(index)

    def update_stage_ui(self, stage):
        if stage <= 0:
            return
        self.stageDropdown.setCurrentIndex(stage)
        self.modbus.stage_updated = -1

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1294, 800)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Main vertical layout
        self.main_layout = QtWidgets.QVBoxLayout(self.centralwidget)

        # GroupBox Layout for GraphCanvas
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setObjectName("groupBox")
        self.groupBox_layout = QtWidgets.QVBoxLayout(self.groupBox)

        self.GraphCanvas = QtWidgets.QFrame(self.groupBox)
        self.GraphCanvas.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.GraphCanvas.setFrameShadow(QtWidgets.QFrame.Raised)
        self.GraphCanvas.setObjectName("GraphCanvas")

        self.canvas_layout = QtWidgets.QVBoxLayout(self.GraphCanvas)
        self.plot_canvas = PlotCanvas(self.GraphCanvas, self.modbus)
        self.canvas_layout.addWidget(self.plot_canvas)

        # Add GraphCanvas to the groupBox layout
        self.groupBox_layout.addWidget(self.GraphCanvas)

        # Add groupBox to main layout
        self.main_layout.addWidget(self.groupBox)

        # Add bottom controls (buttons, labels, etc.)
        self.control_layout = QtWidgets.QHBoxLayout()

        # Start/Stop Button
        self.startStopButton = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.startStopButton.setFont(font)
        self.startStopButton.setObjectName("startStopButton")
        self.control_layout.addWidget(self.startStopButton)

        # Set IP Button and Fields
        self.ipBlock_1 = QtWidgets.QLineEdit(self.centralwidget)
        self.ipBlock_1.setObjectName("ipBlock_1")
        self.control_layout.addWidget(self.ipBlock_1)

        self.ipBlock_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.ipBlock_2.setObjectName("ipBlock_2")
        self.control_layout.addWidget(self.ipBlock_2)

        self.ipBlock_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.ipBlock_3.setObjectName("ipBlock_3")
        self.control_layout.addWidget(self.ipBlock_3)

        self.ipBlock_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.ipBlock_4.setObjectName("ipBlock_4")
        self.control_layout.addWidget(self.ipBlock_4)

        self.setIP = QtWidgets.QPushButton(self.centralwidget)
        self.setIP.setObjectName("setIP")
        self.control_layout.addWidget(self.setIP)

        # Run Current Button
        self.runcurrentLine = QtWidgets.QLineEdit(self.centralwidget)
        self.runcurrentLine.setObjectName("runcurrentLine")
        self.control_layout.addWidget(self.runcurrentLine)

        self.setRunCurrentButton = QtWidgets.QPushButton(self.centralwidget)
        self.setRunCurrentButton.setObjectName("setRunCurrentButton")
        self.control_layout.addWidget(self.setRunCurrentButton)

        # Progress Label
        self.ProgressLabel = QtWidgets.QLabel(self.centralwidget)
        self.ProgressLabel.setObjectName("ProgressLabel")
        self.control_layout.addWidget(self.ProgressLabel)

        # Progress Bar
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.control_layout.addWidget(self.progressBar)

        # Position Label and Display
        self.positionLabel = QtWidgets.QLabel(self.centralwidget)
        self.positionLabel.setObjectName("positionLabel")
        self.control_layout.addWidget(self.positionLabel)

        self.positionDisplay = QtWidgets.QLabel(self.centralwidget)
        self.positionDisplay.setObjectName("positionDisplay")
        self.control_layout.addWidget(self.positionDisplay)

        # Exit Button
        self.exitBtn = QtWidgets.QPushButton(self.centralwidget)
        self.exitBtn.setFont(font)
        self.exitBtn.setObjectName("exitBtn")
        self.control_layout.addWidget(self.exitBtn)

        # Stage Dropdown
        self.stageDropdown = QtWidgets.QComboBox(self.centralwidget)
        self.stageDropdown.setObjectName("stageDropdown")
        self.control_layout.addWidget(self.stageDropdown)

        # Add control layout to main layout
        self.main_layout.addLayout(self.control_layout)

        # Set central widget layout
        MainWindow.setCentralWidget(self.centralwidget)

        # Set Size Policies to allow resizing
        self.plot_canvas.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.startStopButton.setSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def link_ui_to_functions(self):
        self.ipBlock_1.validator()
        self.startStopButton.clicked.connect(self.toggle_start_stop)
        self.setRunCurrentButton.clicked.connect(self.set_run_current)
        self.setIP.clicked.connect(self.set_ip)
        self.exitBtn.clicked.connect(self.do_exit)
        self.runcurrentLine.setValidator(QtGui.QIntValidator(0, 999))
        self.runcurrentLine.editingFinished.connect(self.correct_run_current)
        self.populate_dropdown()
        self.stageDropdown.activated.connect(self.stage_selected)
        self.ipBlock_1.setValidator(QtGui.QIntValidator(0, 255))
        self.ipBlock_2.setValidator(QtGui.QIntValidator(0, 255))
        self.ipBlock_3.setValidator(QtGui.QIntValidator(0, 255))
        self.ipBlock_4.setValidator(QtGui.QIntValidator(0, 255))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.startStopButton.setText(_translate("MainWindow", "Start"))
        self.groupBox.setTitle(_translate("MainWindow", "ProgressGraph"))
        self.ProgressLabel.setText(_translate("MainWindow", "ProgressLabel"))
        self.exitBtn.setText(_translate("MainWindow", "Exit"))
        self.setRunCurrentButton.setText(_translate("MainWindow", "Set runcurrent"))
        self.runcurrentLine.setText(_translate("MainWindow", "100"))
        self.ipBlock_1.setText(_translate("MainWindow", "192"))
        self.ipBlock_2.setText(_translate("MainWindow", "168"))
        self.ipBlock_3.setText(_translate("MainWindow", "59"))
        self.ipBlock_4.setText(_translate("MainWindow", "35"))
        self.setIP.setText(_translate("MainWindow", "Set IP"))
        self.positionLabel.setText(_translate("MainWindow", "Position"))
        self.positionDisplay.setText(_translate("MainWindow", "0"))

    def update_plot(self):
        self.plot_canvas.plot()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.link_ui_to_functions()
    MainWindow.show()
    app.aboutToQuit.connect(ui.modbus.stop)
    sys.exit(app.exec_())
